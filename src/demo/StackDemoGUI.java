package demo;import java.awt.BorderLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;//import java.util.ArrayDeque;//import java.util.Deque;//import java.util.LinkedList;//import java.util.Stack;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;import structures.ArrayStack;//import util.LinkedStack;import structures.StackADT;/** * A simple GUI to demonstrate push and pop Stack operations. *  * @author Alan Fowler acfowler@uw.edu * @version 1.1 */public class StackDemoGUI extends JPanel {        /** A generated version ID for Serialization.*/    private static final long serialVersionUID = 3902076596574498432L;    /** The default width for text fields and text areas. */    private static final int TEXT_WIDTH = 20;    /** The default height for text areas. */    private static final int TEXT_HEIGHT = 6;    /** The width used in various margins and insets. */    private static final int PADDING = 20;        /** A message to display when the stack is empty. */    private static final String EMPTY_MESSAGE = "The Stack is empty.";        /** The escape sequence used to embed a quote symbol in a String. */    private static final String QUOTE = "\"";    /**     * Displays current stack contents.     */    private final JTextArea myStackArea;    /**     * Input text field.     */    private final JTextField myInputText;    /**     * Displays all actions performed on the Stack.     */    private final JTextArea myActionArea;    /**     * A button used to push an element on the Stack.     */    private final JButton myPushButton;    /**     * The stack used in the demo.     */        // JCF classes    //private final Stack<String> myStack = new Stack<>();    //private final Deque<String> myStack = new LinkedList<>();    //private final Deque<String> myStack = new ArrayDeque<>();            // local classes    private final StackADT<String> myStack = new ArrayStack<>();        // If we implement a linked based stack we could use the following code:    //private final StackADT<String> myStack = new LinkedStack<>();    /**     * Sets up the GUI.     */    public StackDemoGUI() {        super();        myInputText = new JTextField(TEXT_WIDTH);        myStackArea = new JTextArea(TEXT_HEIGHT, TEXT_WIDTH);        myActionArea = new JTextArea(TEXT_HEIGHT, TEXT_WIDTH);        myPushButton = new JButton("Push");        setupComponets();    }    /**     * Helper method to perform the work of setting up the GUI components.     */    private void setupComponets() {        myPushButton.addActionListener(new PushListener());        myPushButton.setMnemonic(KeyEvent.VK_U);        final JButton popButton = new JButton("Pop");        popButton.addActionListener(new PopListener());        popButton.setMnemonic(KeyEvent.VK_O);        final JLabel inputLabel = new JLabel("Add to stack: ");        myInputText.setEditable(true);        myStackArea.setMargin(new Insets(PADDING, PADDING, PADDING, PADDING));        myStackArea.setEditable(false);        myStackArea.setFocusable(false);        myStackArea.setText(EMPTY_MESSAGE);        myActionArea.setMargin(new Insets(PADDING, PADDING, PADDING, PADDING));        myActionArea.setEditable(false);        myActionArea.setFocusable(false);        final JPanel inputPanel = new JPanel();        inputPanel.add(inputLabel);        inputPanel.add(myInputText);        inputPanel.add(myPushButton);        inputPanel.add(popButton);        setLayout(new BorderLayout());        add(new JScrollPane(myStackArea), BorderLayout.NORTH);        add(inputPanel, BorderLayout.CENTER);        add(new JScrollPane(myActionArea), BorderLayout.SOUTH);        setBorder(BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING));    }    /**     * Creates and displays the application frame.     */    public void display() {        final JFrame frame = new JFrame("Stack Demo");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setContentPane(this);        frame.pack();        frame.setResizable(false);        frame.setLocationRelativeTo(null);        frame.setVisible(true);        myInputText.grabFocus();        getRootPane().setDefaultButton(myPushButton);    }        /**     * Returns a String representation of the contents of myStack.      * The String will list the one per line with the most recently added element at the top.     *      * @return A String with a vertical display of the elements in myStack     */    private String stackToString() {                final String[] temp = new String[myStack.size()];        int index = 0;                final StringBuilder sb = new StringBuilder();        while (!myStack.isEmpty()) {            String s = myStack.pop();            if (s.length() == 0) {                s = "an empty String";            }            sb.append(s);            sb.append('\n');            temp[index] = s;            index++;        }        index--;        while (index >= 0) {            myStack.push(temp[index]);            index--;        }                return sb.toString();    }            // inner classes    /**     * An action listener for the push button.     */    private class PushListener implements ActionListener {        /**         * Adds the contents of the user entry text field to the top of this         * stack.         *          * @param theEvent incoming event         */        public void actionPerformed(final ActionEvent theEvent) {            final String toPush = myInputText.getText();                        if (toPush.length() == 0) {                myActionArea.append("An empty String was pushed on the Stack.\n");            } else {                       myActionArea.append(QUOTE + toPush + QUOTE + " was pushed onto the stack.\n");            }            myStack.push(toPush);            myStackArea.setText(stackToString());                            myStackArea.setCaretPosition(0); // forces scroll up            myInputText.setText(null); // clears input field            myInputText.grabFocus();        }    }    /**     * An action listener for the pop button.     */    private class PopListener implements ActionListener {        /**         * removes the element at the top of this stack.         *          * @param theEvent incoming event         */        public void actionPerformed(final ActionEvent theEvent) {            if (myStack.isEmpty()) {                myActionArea.append("Cannot pop from an empty stack.\n");            } else {                String popped = myStack.pop();                if (popped.length() == 0) {                    popped = " an empty String";                 }                myActionArea.append(QUOTE + popped + QUOTE + " was popped off the stack.\n");                if (myStack.isEmpty()) {                    myStackArea.setText(EMPTY_MESSAGE);                } else {                    myStackArea.setText(stackToString());                }                myStackArea.setCaretPosition(0);                myInputText.setText(null);            }            myInputText.grabFocus();        }    }}